@using ABC.Shared.Models
@page "/CustomerIndex"

<div class="container-fluid pt-2 pb-5">
    <div class="row pb-3">
        <!-- Title -->
        <div class="col-8 text-start mb-3 mb-sm-0">
			<h1 style="color: #223442;"><b>Customers</b></h1>
        </div>

		<!-- New Customer Button-->
        <div class="col-2 text-center mb-3 mb-sm-0">
            <div class="d-flex justify-content-end">
                <a class="btn btn-primary" asp-area="Admin" asp-controller="Customer" asp-action="Create" role="button">
                    <i class="bi bi-plus-lg"></i> New Customer
                </a>
            </div>
        </div>


        <!-- Export Button -->
        <div class="col-2 text-end mb-3 mb-sm-0">
            <a href="#" class="btn btn-success" id="btngenerate">
                <i class="bi bi-box-arrow-up"></i> Export
            </a>
        </div>

    </div>

    <div class="row pt-2 pb-4">
        <!-- Search Bar -->
        <div class="col-12">
            <form class="d-flex">
                <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search">
                <button class="btn btn-outline-secondary" type="submit"><i class="bi bi-search"></i></button>
            </form>
        </div>
    </div>

    <!-- Customer Purchase Table -->
    <table class="table table-bordered table-striped table-hover">
        <thead>
            <tr>
                <th></th>
                <th>ID</th>
                <th>Customer Name</th>
                <th>Email Address</th>
                <th>Billing Address</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @*
            @foreach (var obj in Model)
            {
                <tr>
                    <td></td>
                    <td>@obj.Id</td>
                    <td>@obj.FirstName @obj.LastName</td>
                    <td>@obj.EmailAddress</td>
                    <td>@obj.ApSuUn @obj.StreetorSubd @obj.Barangay @obj.City @obj.Province @obj.ZipCode</td>
                    <td>@obj.Type</td>
                    

                    <td>
                        <div class="w-80 btn-group d-flex justify-content-center align-items-center" role="group">
                            <a asp-controller="Customer" asp-action="Edit" asp-route-id="@obj.Id" class="btn btn-outline-dark btn-sm">
                                <i class="bi bi-pencil-square"></i> Edit
                            </a>
                        </div>
                    </td>

                    <td>
                        <div class="w-30 btn-group d-flex justify-content-center align-items-center" role="group">
                            <a asp-controller="Customer" asp-action="Delete" asp-route-id="@obj.Id" class="btn btn-outline-danger btn-sm">
                                <i class="bi bi-trash-fill"></i> Delete
                            </a>
                        </div>
                    </td>

                </tr>
            } *@
        </tbody>
    </table>

</div>

<script>
    $("#btngenerate").attr("href", `/Admin/Customer/GeneratePdf`);
</script>

@code{
    @*
    [Area("Admin")]
    [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]

    public class CustomerController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IConverter _pdfConverter;

        public CustomerController(IUnitOfWork unitOfWork, IConverter pdfConverter)
        {
            _unitOfWork = unitOfWork;
            _pdfConverter = pdfConverter;
        }

        //Retrieve the Data from Database
        public IActionResult Index()
        {
            List<Customer> objCustomerList = _unitOfWork.Customer.GetAll().ToList();
            return View(objCustomerList);
        }


        //ADD
        public IActionResult Create()
        {
            return View();

        }

        //Post the Data to Database
        [HttpPost]
        public IActionResult Create(Customer obj)
        {
            if (ModelState.IsValid)
            {
                _unitOfWork.Customer.Add(obj);
                _unitOfWork.Save();
                TempData["toastAdd"] = "Customer Added successfully";
                return RedirectToAction("Index", "Customer");
            }

            return View();
        }




        //Edit
        public IActionResult Edit(int? id)
        {
            if (id == null || id == 0)
            {
                return NotFound();
            }
            Customer? admCustomerFromDb = _unitOfWork.Customer.Get(u => u.Id == id);
            //Customer? admCustomerFromDb1 = _db.Categories.FirstOrDefault(u=>u.Id==id);
            //Customer? admCustomerFromDb3 = _db.Categories.Where(u => u.Id == id).FirstOrDefault();

            if (admCustomerFromDb == null)
            {
                return NotFound();
            }

            return View(admCustomerFromDb);

        }

        //Post the Data to Database
        [HttpPost]
        public IActionResult Edit(Customer obj)
        {
            if (ModelState.IsValid)
            {
                _unitOfWork.Customer.Update(obj);
                _unitOfWork.Save();
                TempData["toastUpd"] = "Customer updated successfully";
                return RedirectToAction("Index");
            }

            return View();
        }



        //DELETE
        public IActionResult Delete(int? id)
        {
            if (id == null || id == 0)
            {
                return NotFound();
            }
            Customer? admCustomerFromDb = _unitOfWork.Customer.Get(u => u.Id == id);

            if (admCustomerFromDb == null)
            {
                return NotFound();
            }
            return View(admCustomerFromDb);

        }

        //Post the Data to Database
        [HttpPost, ActionName("Delete")]
        public IActionResult DeletePOST(int? id)
        {
            Customer? obj = _unitOfWork.Customer.Get(u => u.Id == id);

            if (obj == null)
            {
                return NotFound();
            }
            _unitOfWork.Customer.Remove(obj);
            _unitOfWork.Save();
            TempData["toastDel"] = "Customer deleted successfully";
            return RedirectToAction("Index", "Customer");
        }


        [AllowAnonymous]
        public async Task<IActionResult> GeneratePdf()
        {

            var htmlContent = $"{this.Request.Scheme}://{this.Request.Host}/Admin/Customer/CustomerPdf";

            var pdf = new HtmlToPdfDocument()
            {
                GlobalSettings = new GlobalSettings()
                {
                    PaperSize = PaperKind.A4,
                    Orientation = Orientation.Portrait
                },
                Objects = {
                    new ObjectSettings(){
                        Page = htmlContent
                    }
                }
            };

            var archivoPDF = _pdfConverter.Convert(pdf);
            return File(archivoPDF, "application/pdf");
        }


        [AllowAnonymous]
        public IActionResult CustomerPdf()
        {
            List<Customer> objCustomerList = _unitOfWork.Customer.GetAll().ToList();
            return View(objCustomerList);
        }
    }
    *@
}