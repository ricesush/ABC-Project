@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using ABC.Client.Data
@using ABC.Shared.Models
@using ABC.Shared.Utility
@using ABC.Client.Components.SharedComponents;

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager 

@using ABC.Client.Components.Layout
@layout NoLayout

<link href="Register.razor.css" rel="stylesheet" />

<PageTitle>ABC - Register</PageTitle>

<section class="card shadow col-lg-8 mx-auto minHeight">
    <div class="row text-center p-5">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <BrandLogo />
            <p>Create a new account</p>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>
            <div class="row row-cols-lg-2 row-cols-1 g-2">
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Password" />
                    <label for="confirm-password">Confirm Password</label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                </div>
            </div>

            <br />
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.FirstName" class="form-control" autocomplete="full-name" aria-required="true" placeholder="First Name" />
                <label for="confirm-password">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.LastName" class="form-control" autocomplete="full-name" aria-required="true" placeholder="Last Name" />
                <label for="confirm-password">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.PhoneNumber" class="form-control" autocomplete="contact-number" aria-required="true" placeholder="Contact Number" />
                <label for="confirm-password">Contact Number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <br />
            <div class="form-floating mb-3">
                <InputText type="text" @bind-Value="Input.AddressLine" class="form-control" autocomplete="address-line" aria-required="true" placeholder="Address Line" />
                <label for="confirm-password">Address Line</label>
                <ValidationMessage For="() => Input.AddressLine" class="text-danger" />
            </div>

            <section class="row row-cols-lg-3 row-cols-1 g-2">
                <div class="form-floating mb-3">
                    <InputText type="text" @bind-Value="Input.City" class="form-control" autocomplete="city" aria-required="true" placeholder="City" />
                    <label for="confirm-password">City</label>
                    <ValidationMessage For="() => Input.City" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="text" @bind-Value="Input.Province" class="form-control" autocomplete="province" aria-required="true" placeholder="Province" />
                    <label for="confirm-password">Province</label>
                    <ValidationMessage For="() => Input.Province" class="text-danger" />
                </div>

                <div class="form-floating mb-3">
                    <InputText type="text" @bind-Value="Input.PostalCode" class="form-control" autocomplete="postal-code" aria-required="true" placeholder="Postal Code" />
                    <label for="confirm-password">Postal Code</label>
                    <ValidationMessage For="() => Input.PostalCode" class="text-danger" />
                </div>
            </section>
            

            <button type="submit" class="w-100 btn btn-lg">Register</button>
        </EditForm>
    </div>
</section>

@* <div class="row">
    
    @* <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div> *@

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;
        user.Address = Input.AddressLine;
        user.City = Input.City;
        user.Province = Input.Province;
        user.PostalCode = Input.PostalCode;
        user.PhoneNumber = Input.PhoneNumber;

        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        if (!RoleManager.RoleExistsAsync(SD.Role_Customer).GetAwaiter().GetResult())
        {
            RoleManager.CreateAsync(new IdentityRole(SD.Role_Customer)).GetAwaiter().GetResult();
            RoleManager.CreateAsync(new IdentityRole(SD.Role_Employee)).GetAwaiter().GetResult();
            RoleManager.CreateAsync(new IdentityRole(SD.Role_Admin)).GetAwaiter().GetResult();
        }

        if (!String.IsNullOrEmpty(Input.Role)) {
            await UserManager.AddToRoleAsync(user, Input.Role);
        }
        else
        {
            await UserManager.AddToRoleAsync(user, SD.Role_Customer);
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string? AddressLine {  get; set; }
        public string? City {  get; set; }
        public string? Province { get; set; }
        public string? PostalCode { get; set; }
        public string? Branch { get; set; }
        [Required]
        [Phone(ErrorMessage = "Please enter a valid phone number")]
        [DataType(DataType.PhoneNumber)]
        [Display(Name = "Phone Number")]
        [StringLength(11, MinimumLength = 11, ErrorMessage = "Phone number must be between in this format 9XX XXX YYYY")]
        public string PhoneNumber { get; set; }
        public string? Role { get; set; }
    }
}
