// <auto-generated />
using System;
using ABC.Client.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABC.Client.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240416130750_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABC.Shared.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StoreId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c856f2ea-3135-4177-b121-0c5396d81916",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8a732cbe-1315-46ae-a01c-687374db034d",
                            Email = "admin@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Admin",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEER7dHEwXcBxjRdOBROpnWiYbCfUt0UPGQL1IvSYj2UWEt0etSK5agMF+z31QBf+MA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c94eecc-65bb-4e82-bbf4-d692489dd8e8",
                            TimeStamp = new DateTime(2024, 4, 16, 13, 7, 49, 902, DateTimeKind.Utc).AddTicks(6851),
                            TwoFactorEnabled = false,
                            UserName = "admin@abc.com"
                        },
                        new
                        {
                            Id = "ed8f0359-6d88-4acb-9acc-19e69698c71d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fdc4f89-1de3-4b32-9545-734d9a921077",
                            Email = "manager@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Manager",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "MANAGER@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGL2JHJANh5TrKvKCm6fAFwgHIISA58gzzn1U0vokk7ioi0hXcvlG0btDfMmKgjC0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "172496b3-bd51-4ed8-bc32-3fafdf4c44b1",
                            TimeStamp = new DateTime(2024, 4, 16, 13, 7, 49, 985, DateTimeKind.Utc).AddTicks(8639),
                            TwoFactorEnabled = false,
                            UserName = "manager@abc.com"
                        },
                        new
                        {
                            Id = "869196d6-4509-46ef-88b6-1165c9fc5fc7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faef9a15-9c50-449e-8470-d0496759dec5",
                            Email = "emp@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Employee",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "EMP@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEP7X8wvVgUibu1d6FwXtVQ1e6jsp9e01vOU+ITk85QHXKbO+SXjIe30RwaBcF5LGYw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "058ec4d8-165e-4ec9-8ea0-8c37ff1e5d57",
                            TimeStamp = new DateTime(2024, 4, 16, 13, 7, 50, 65, DateTimeKind.Utc).AddTicks(6246),
                            TwoFactorEnabled = false,
                            UserName = "emp@abc.com"
                        },
                        new
                        {
                            Id = "396af5d9-ab85-4fe7-9b9a-6bb877e9f247",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f18a2a17-a295-45ba-be0a-9b0e719a4cc0",
                            Email = "cust@abc.com",
                            EmailConfirmed = true,
                            FirstName = "Ej Customer",
                            LastName = "Esan",
                            LockoutEnabled = false,
                            NormalizedUserName = "CUST@ABC.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMhd5awJvGhQk+QlYnWYhAEmvWIhoofJYcQbXODw8nQAkWUkDU4WRjvXi1U9kdBZWA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56d495d5-dc4b-4b8f-98cd-8b8858b1ebbd",
                            TimeStamp = new DateTime(2024, 4, 16, 13, 7, 50, 151, DateTimeKind.Utc).AddTicks(7911),
                            TwoFactorEnabled = false,
                            UserName = "cust@abc.com"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("ABC.Shared.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CCTV"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Printers"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Computer Accesories"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cables & Tools"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Privacy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TermsPolicy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VissionMission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("returnRefund")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "About",
                            Privacy = "Privacy Policy",
                            TermsPolicy = "Terms and Conditions",
                            VissionMission = "Vission And Mission",
                            returnRefund = "Return and Refund"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApSuUn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetorSubd")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65aa1797-485a-4559-a034-ac4c0f9667b8"),
                            ApSuUn = "Unit 1234",
                            Barangay = "Batman",
                            City = "Antipolo",
                            ContactNumber = 9568271611L,
                            EmailAddress = "neiljejomar@gmail.com",
                            FirstName = "Kurt",
                            LastName = "Betonio",
                            Province = "Rizal",
                            StreetorSubd = "Jasmine St.",
                            Type = "Walk in",
                            ZipCode = 1870
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("Charge")
                        .HasColumnType("float");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("OrderHeaderId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderHeaderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Carrier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DeliveryFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OfficialReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServiceFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ShippingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderHeaders");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Barcode")
                        .HasColumnType("bigint");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<float>("CostPrice")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinimumStockQuantity")
                        .HasColumnType("int");

                    b.Property<float>("RetailPrice")
                        .HasColumnType("real");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Barcode = 832175698L,
                            Brand = "HP",
                            CategoryId = 1,
                            CostPrice = 800f,
                            Description = "Versatile all-in-one printer for printing, copying, and scanning",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            MinimumStockQuantity = 5,
                            RetailPrice = 1299f,
                            SKU = "printer-AllInOne-XYZ123",
                            StockQuantity = 20,
                            SupplierId = 2,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1819),
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ123 All-in-One Printer",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 2,
                            Barcode = 954532414L,
                            Brand = "Samsung",
                            CategoryId = 2,
                            CostPrice = 1200f,
                            Description = "Panoramic view with motion detection",
                            Duration = "7 days from date of purchase",
                            ImageUrl = "",
                            MinimumStockQuantity = 4,
                            RetailPrice = 1999f,
                            SKU = "cctv-SmartCam-360",
                            StockQuantity = 15,
                            SupplierId = 1,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1830),
                            WarrantyType = "Manufacturers Warranty",
                            productName = "SmartCam 360 Security Camera",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 3,
                            Barcode = 123456789013L,
                            Brand = "Dell",
                            CategoryId = 4,
                            CostPrice = 600f,
                            Description = "Lightweight 13-inch laptop with SSD and 8GB RAM",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            MinimumStockQuantity = 3,
                            RetailPrice = 899f,
                            SKU = "laptop-ultrabook-ABC789",
                            StockQuantity = 8,
                            SupplierId = 2,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1834),
                            WarrantyType = "Extended Warranty",
                            productName = "ABC789 13-inch Laptop",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 4,
                            Barcode = 123456789014L,
                            Brand = "Apple",
                            CategoryId = 4,
                            CostPrice = 500f,
                            Description = "5.8-inch OLED smartphone with dual camera",
                            Duration = "24 months from date of purchase",
                            ImageUrl = "",
                            MinimumStockQuantity = 5,
                            RetailPrice = 999f,
                            SKU = "phone-smartphone-XYZ101",
                            StockQuantity = 12,
                            SupplierId = 1,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1838),
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ101 Smartphone",
                            status = "In Stock"
                        },
                        new
                        {
                            Id = 5,
                            Barcode = 123456789015L,
                            Brand = "Bose",
                            CategoryId = 4,
                            CostPrice = 150f,
                            Description = "Noise cancelling wireless over-ear headphones",
                            Duration = "12 months from date of purchase",
                            ImageUrl = "",
                            MinimumStockQuantity = 5,
                            RetailPrice = 249f,
                            SKU = "headphones-wireless-XYZ222",
                            StockQuantity = 20,
                            SupplierId = 2,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1841),
                            WarrantyType = "Extended Warranty",
                            productName = "XYZ222 Wireless Headphones",
                            status = "In Stock"
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DeliveryDate")
                        .HasColumnType("date");

                    b.Property<double>("OrderTotal")
                        .HasColumnType("float");

                    b.Property<string>("PaymentTerm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("SubTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("ABC.Shared.Models.ShoppingCart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockPerStore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Store1StockQty")
                        .HasColumnType("int");

                    b.Property<int>("Store2StockQty")
                        .HasColumnType("int");

                    b.Property<int>("TotalStocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("StockPerStores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            Store1StockQty = 15,
                            Store2StockQty = 5,
                            TotalStocks = 20
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            Store1StockQty = 7,
                            Store2StockQty = 8,
                            TotalStocks = 15
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            Store1StockQty = 5,
                            Store2StockQty = 3,
                            TotalStocks = 8
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            Store1StockQty = 6,
                            Store2StockQty = 6,
                            TotalStocks = 12
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            Store1StockQty = 17,
                            Store2StockQty = 3,
                            TotalStocks = 20
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationStoreId")
                        .HasColumnType("int");

                    b.Property<int>("SourceStoreId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransferRemarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TransferTotal")
                        .HasColumnType("float");

                    b.Property<string>("applicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStoreId");

                    b.HasIndex("SourceStoreId");

                    b.HasIndex("applicationUserId");

                    b.ToTable("StockTransfers");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescitnationStoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Failed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("bit");

                    b.Property<string>("SourceStoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockPerStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferredStocks")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StockTransferAudit");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferItemDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CostPrice")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StockTransferId")
                        .HasColumnType("int");

                    b.Property<double>("subTotal")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StockTransferId");

                    b.ToTable("StockTransferItemDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("storeBarangay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("storeCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("storeContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("storeEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("storeStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeStreetSubdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeUnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storeZipCode")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Stores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            storeBarangay = "Maybancal",
                            storeCity = "Tanay",
                            storeContactNumber = 9651232235L,
                            storeEmail = "abiz214@gmail.com",
                            storeName = "Addsome Business Corporation",
                            storeProvince = "Rizal",
                            storeStatus = "Active",
                            storeStreetSubdv = "E. Corazon",
                            storeUnitNumber = "c4 l5",
                            storeZipCode = 1870
                        },
                        new
                        {
                            Id = 2,
                            storeBarangay = "Maybancal",
                            storeCity = "Tanay",
                            storeContactNumber = 9651232235L,
                            storeEmail = "abiz214@gmail.com",
                            storeName = "Ahead Biz Computers",
                            storeProvince = "Rizal",
                            storeStatus = "Active",
                            storeStreetSubdv = "E. Corazon",
                            storeUnitNumber = "c4 l5",
                            storeZipCode = 1870
                        });
                });

            modelBuilder.Entity("ABC.Shared.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("supplierBarangay")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("supplierCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierCompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("supplierContactNumber")
                        .HasColumnType("bigint");

                    b.Property<string>("supplierEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierProvince")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("supplierStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierStreetSubdv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplierUnitNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("supplierZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1948),
                            supplierBarangay = "Maybancal",
                            supplierCity = "Tanay",
                            supplierCompanyName = "Addvert",
                            supplierContactNumber = 9651232235L,
                            supplierEmail = "addvert214@gmail.com",
                            supplierNote = "My supplier",
                            supplierProvince = "Rizal",
                            supplierStatus = "Active",
                            supplierStreetSubdv = "E. Corazon",
                            supplierUnitNumber = "c4 l5",
                            supplierZipCode = 1870
                        },
                        new
                        {
                            Id = 2,
                            Timestamp = new DateTime(2024, 4, 16, 13, 7, 50, 249, DateTimeKind.Utc).AddTicks(1954),
                            supplierBarangay = "Maybancal",
                            supplierCity = "Tanay",
                            supplierCompanyName = "Addvert",
                            supplierContactNumber = 9651232235L,
                            supplierEmail = "addvert214@gmail.com",
                            supplierNote = "My supplier",
                            supplierProvince = "Rizal",
                            supplierStatus = "Active",
                            supplierStreetSubdv = "E. Corazon",
                            supplierUnitNumber = "c4 l5",
                            supplierZipCode = 1870
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "38b30e03-500a-448e-ae5e-89310457aeff",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "0533373f-8ffa-4324-bcf3-e1d6bb924d1c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "8701dff2-7eb3-4943-8270-e2bc5c212376",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "a1aa1c65-eae6-4457-bd75-30c3b3f9527a",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "c856f2ea-3135-4177-b121-0c5396d81916",
                            RoleId = "38b30e03-500a-448e-ae5e-89310457aeff"
                        },
                        new
                        {
                            UserId = "ed8f0359-6d88-4acb-9acc-19e69698c71d",
                            RoleId = "0533373f-8ffa-4324-bcf3-e1d6bb924d1c"
                        },
                        new
                        {
                            UserId = "869196d6-4509-46ef-88b6-1165c9fc5fc7",
                            RoleId = "8701dff2-7eb3-4943-8270-e2bc5c212376"
                        },
                        new
                        {
                            UserId = "396af5d9-ab85-4fe7-9b9a-6bb877e9f247",
                            RoleId = "a1aa1c65-eae6-4457-bd75-30c3b3f9527a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ABC.Shared.Models.ApplicationUser", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderDetail", b =>
                {
                    b.HasOne("ABC.Shared.Models.OrderHeader", "OrderHeader")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderHeader");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ABC.Shared.Models.Customer", "Customer")
                        .WithMany("OrderHeaders")
                        .HasForeignKey("CustomerId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.HasOne("ABC.Shared.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Store", null)
                        .WithMany("Products")
                        .HasForeignKey("StoreId");

                    b.HasOne("ABC.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchasedProducts")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ABC.Shared.Models.ShoppingCart", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockPerStore", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithOne("StockPerStore")
                        .HasForeignKey("ABC.Shared.Models.StockPerStore", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.HasOne("ABC.Shared.Models.Store", "DestinationStore")
                        .WithMany()
                        .HasForeignKey("DestinationStoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.Store", "SourceStore")
                        .WithMany("StockTransfers")
                        .HasForeignKey("SourceStoreId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.ApplicationUser", "applicationUser")
                        .WithMany()
                        .HasForeignKey("applicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStore");

                    b.Navigation("SourceStore");

                    b.Navigation("applicationUser");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransferItemDetails", b =>
                {
                    b.HasOne("ABC.Shared.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.StockTransfer", "StockTransfer")
                        .WithMany("StockTransferItems")
                        .HasForeignKey("StockTransferId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StockTransfer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ABC.Shared.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ABC.Shared.Models.Customer", b =>
                {
                    b.Navigation("OrderHeaders");
                });

            modelBuilder.Entity("ABC.Shared.Models.OrderHeader", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ABC.Shared.Models.Product", b =>
                {
                    b.Navigation("StockPerStore")
                        .IsRequired();
                });

            modelBuilder.Entity("ABC.Shared.Models.PurchaseOrder", b =>
                {
                    b.Navigation("PurchasedProducts");
                });

            modelBuilder.Entity("ABC.Shared.Models.StockTransfer", b =>
                {
                    b.Navigation("StockTransferItems");
                });

            modelBuilder.Entity("ABC.Shared.Models.Store", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("StockTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
