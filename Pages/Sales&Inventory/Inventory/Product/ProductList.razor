@using ABC.Shared.Models
@page "/ProductList"

<div class="container pt-2 pb-5">
    <div class="row pb-4">
        <!-- Title -->
        <div class="col-lg-8 col-sm-12 text-start mb-3 mb-sm-0">
            <h1 style="color: #223442;"><b>Product List</b></h1>
        </div>

        <!-- Dropdown Button -->
        <div class="col-lg-2 col-sm-4 text-end mb-3 mb-sm-0">
            <div class="dropdown d-flex justify-content-end">
                <a class="btn btn-primary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-bs-toggle="dropdown" aria-expanded="true">
                    <i class="bi bi-plus-lg"></i> Add
                </a>

                <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                    <li><a class="dropdown-item" asp-area="Admin" asp-controller="Product" asp-action="Upsert">Product</a></li>
                    <li>
                        <a class="dropdown-item" asp-area="Admin" asp-controller="Category" asp-action="Index">Category</a>
                    </li>
                </ul>
            </div>
        </div>


        <!-- Export Button -->
        <div class="col-lg-2 col-sm-4 text-end mb-3 mb-sm-0">
            <a href="#" class="btn btn-success" id="btngenerate">
                <i class="bi bi-box-arrow-up"></i> Export
            </a>
        </div>
    </div>

    <table id="tblData" class="table table-bordered table-striped table-hover " action="width:100%">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Barcode</th>
                <th>Cost Price</th>
                <th>Retail Price</th>
                <th>Stock Qty</th>
                <th>Supplier</th>
                <th>Category</th>
                <th></th>
            </tr>
        </thead>
    </table>
</div>

<script src="~/js/product.js"></script>

@code{
    /**
    [Area("Admin")]
    [Authorize(Roles = SD.Role_Admin + "," + SD.Role_Employee)]

    public class ProductController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IWebHostEnvironment _webHostEnvironment;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly IConverter _pdfConverter;

        public ProductController(IUnitOfWork unitOfWork, IWebHostEnvironment webHostEnvironment, UserManager<IdentityUser> userManager, IConverter pdfConverter)
        {
            _unitOfWork = unitOfWork;
            _webHostEnvironment = webHostEnvironment;
            _userManager = userManager;
            _pdfConverter = pdfConverter;
        }

        //Retrieve the Data from Database
        public IActionResult Index()
        {
            List<Product> objProductList = _unitOfWork.Product.GetAll(includeProperties: "Supplier,Category").ToList();
            return View(objProductList);
        }


        //ADD
        public IActionResult Upsert(int? id)
        {
            //Chooses the supplier company name column from DB
            ProductVM productVM = new()
            {
                SuppllierList = _unitOfWork.Supplier.GetAll().Select(u => new SelectListItem
                {
                    Text = u.supplierCompanyName,
                    Value = u.Id.ToString()
                }),

                CategoryList = _unitOfWork.Category.GetAll().Select(u => new SelectListItem
                {
                    Text = u.Name,
                    Value = u.Id.ToString()
                }),
                Product = new Product()
            };

            if (id == null || id == 0)
            {
                //Create
                return View(productVM);
            }
            else
            {
                //Update
                productVM.Product = _unitOfWork.Product.Get(u => u.Id == id);
                return View(productVM);
            }


        } **/

        /**
        //Post the Data to Database
        [HttpPost]
        public IActionResult Upsert(ProductVM productVM, IFormFile? file)
        {
            if (ModelState.IsValid)
            {
                string wwwRootPath = _webHostEnvironment.WebRootPath;
                if (file != null)
                {
                    string fileName = Guid.NewGuid().ToString() + Path.GetExtension(file.FileName);
                    string productPath = Path.Combine(wwwRootPath, @"image\product");

                    if (!string.IsNullOrEmpty(productVM.Product.ImageUrl))
                    {
                        //delete old Image
                        var oldImagePath = Path.Combine(wwwRootPath, productVM.Product.ImageUrl.TrimStart('\\'));
                        if (System.IO.File.Exists(oldImagePath))
                        {
                            System.IO.File.Delete(oldImagePath);
                        }
                    }
                    //Upload Image
                    using (var fileStream = new FileStream(Path.Combine(productPath, fileName), FileMode.Create))
                    {
                        file.CopyTo(fileStream);
                    }
                    //Ipload Image URl
                    productVM.Product.ImageUrl = @"\image\product\" + fileName;
                }**/

                /**
                if (productVM.Product.Id == 0)
                {
                    _unitOfWork.Product.Add(productVM.Product);


                    //LOG START
                    var user = _userManager.GetUserAsync(User).Result;
                    var auditLog = new AuditLog
                    {
                        UserName = User.Identity.Name,
                        Role = _userManager.GetRolesAsync(user).Result.FirstOrDefault(),
                        Action = "Create",
                        EntityName = "Product",
                        EntityKey = "Create Product",
                        Changes = "New Product created: " + productVM.Product.productName,
                        Timestamp = DateTime.Now,
                        FormattedTime = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
                    };

                    _unitOfWork.AuditLog.Add(auditLog);
                    //LOG END
                }
                else
                {
                    _unitOfWork.Product.Update(productVM.Product);
                    //LOG START
                    var user = _userManager.GetUserAsync(User).Result;
                    var auditLog = new AuditLog
                    {
                        UserName = User.Identity.Name,
                        Role = _userManager.GetRolesAsync(user).Result.FirstOrDefault(),
                        Action = "Update",
                        EntityName = "Product",
                        EntityKey = "Update Product",
                        Changes = "Product updated: " + productVM.Product.productName,
                        Timestamp = DateTime.Now,
                        FormattedTime = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
                    };

                    _unitOfWork.AuditLog.Add(auditLog);
                    //LOG END
                }


                _unitOfWork.Save();
                TempData["toastAdd"] = "Product Updated successfully";
                return RedirectToAction("Index");
            }
            else
            {
                productVM.SuppllierList = _unitOfWork.Supplier.GetAll().Select(u => new SelectListItem
                {
                    Text = u.supplierCompanyName,
                    Value = u.Id.ToString()
                });

                productVM.CategoryList = _unitOfWork.Category.GetAll().Select(u => new SelectListItem
                {
                    Text = u.Name,
                    Value = u.Id.ToString()
                });
                return View(productVM);
            }
        }**/

        /**
        [AllowAnonymous]
        public async Task<IActionResult> GeneratePdf()
        {

            var htmlContent = $"{this.Request.Scheme}://{this.Request.Host}/Admin/Product/ProductPdf";

            var pdf = new HtmlToPdfDocument()
            {
                GlobalSettings = new GlobalSettings()
                {
                    PaperSize = PaperKind.A4,
                    Orientation = Orientation.Portrait
                },
                Objects = {
                    new ObjectSettings(){
                        Page = htmlContent
                    }
                }
            };

            var archivoPDF = _pdfConverter.Convert(pdf);
            return File(archivoPDF, "application/pdf");
        }


        [AllowAnonymous]
        public IActionResult ProductPdf()
        {
            List<Product> objProductList = _unitOfWork.Product.GetAll(includeProperties: "Supplier, Category").ToList();
            return View(objProductList);
        }


        #region API CALLS
        [HttpGet]
        public IActionResult GetAll()
        {
            List<Product> objProductList = _unitOfWork.Product.GetAll(includeProperties: "Supplier, Category").ToList();
            return Json(new { data = objProductList });
        }

        [HttpDelete]
        public IActionResult Delete(int? id)
        {
            var productToBeDeleted = _unitOfWork.Product.Get(u => u.Id == id);

            if (productToBeDeleted == null)
            {
                return Json(new { success = false, message = "Error while deleting" });
            }

            //LOG START
            var user = _userManager.GetUserAsync(User).Result;
            var auditLogDelete = new AuditLog
            {
                UserName = User.Identity.Name,
                Role = _userManager.GetRolesAsync(user).Result.FirstOrDefault(),
                Action = "Delete",
                EntityName = "Product",
                EntityKey = "Delete Product",
                Changes = "Product deleted: " + productToBeDeleted.productName,
                Timestamp = DateTime.Now,
                FormattedTime = DateTime.Now.ToString("MM/dd/yyyy hh:mm tt")
            };

            _unitOfWork.AuditLog.Add(auditLogDelete);
            //LOG END

            var oldImagePath =

            //delete old Image
            Path.Combine(_webHostEnvironment.WebRootPath, productToBeDeleted.ImageUrl.TrimStart('\\'));
            if (System.IO.File.Exists(oldImagePath))
            {
                System.IO.File.Delete(oldImagePath);
            }
            _unitOfWork.Product.Remove(productToBeDeleted);
            _unitOfWork.Save();

            return Json(new { success = true, message = "Delete Successful" });
        }
        #endregion
    }**/
}